from sklearn import datasets
from sklearn import preprocessing
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import numpy as np

def plot_boundaries(x, k , kmeans, centers):

    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF', '#FFFF00', '#800000', '#FF33F0', '#B650AF'
                                 , '#3337FF', '#F99F00', '#00F9F5'])
    cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])

    h = 0.02
    x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1
    y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])

    # Put the result into a color plot
    Z = Z.reshape(xx.shape)
    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot also the training points
    plt.scatter(x[:, 0], x[:, 1], c=y, cmap=cmap_bold)
    plt.scatter(centers[:, 0], centers[:, 1], c='w', marker='x', s=100, linewidths=5)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.title("K-Means( k =  "+ str(k)+ ")")
    plt.show()

digits = datasets.load_digits()
x = digits.data
y = digits.target

x = x[y<3]
y = y[y<3]

x = preprocessing.scale(x)

x = PCA(2).fit_transform(x)

for i in range(3, 11):
    kmeans = KMeans(i)
    kmeans.fit(x)
    centers = kmeans.cluster_centers_
    plot_boundaries(x, i, kmeans, centers)
    plt.show()

